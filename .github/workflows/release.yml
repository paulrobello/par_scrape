name: Release 🐍 distribution

on:
  workflow_dispatch:
  workflow_call:

jobs:
  github-release:
    name: Create GitHub Release
    runs-on: ubuntu-latest
    timeout-minutes: 20
    permissions:
      contents: write
      id-token: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.12'

      - name: Install uv
        uses: astral-sh/setup-uv@v4

      - name: Install dependencies
        run: |
          uv sync --all-extras --dev

      - name: Get version from __init__.py
        id: get_version
        run: |
          version=$(uv run python -c "from src.par_scrape import __version__; print(__version__)")
          echo "Raw version output: $version"
          echo "VERSION=$version" >> $GITHUB_ENV

      - name: Check version
        id: check_version
        run: |
          echo "Version in env: ${{ env.VERSION }}"
          if [ -z "${{ env.VERSION }}" ]; then
            echo "Error: VERSION is empty"
            exit 1
          fi

      - name: Restore cached build artifacts
        uses: actions/cache@v4
        with:
          path: dist
          key: ${{ runner.os }}-3.12-x64-${{ hashFiles('**/pyproject.toml') }}-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-3.12-x64-${{ hashFiles('**/pyproject.toml') }}-
            ${{ runner.os }}-3.12-x64-

      - name: Sign the dists with Sigstore
        uses: sigstore/gh-action-sigstore-python@v3.0.0
        with:
          inputs: >-
            ./dist/*.tar.gz
            ./dist/*.whl

      - name: Create GitHub Release
        env:
          GITHUB_TOKEN: ${{ github.token }}
        run: |
          gh release create \
          'release-v${{ env.VERSION }}' \
          --repo '${{ github.repository }}' \
          --generate-notes \
          --latest

      - name: Upload artifact signatures to GitHub Release
        env:
          GITHUB_TOKEN: ${{ github.token }}
        run: |
          gh release upload \
          'release-v${{ env.VERSION }}' dist/** \
          --repo '${{ github.repository }}'

      - name: Discord notification
        env:
          DISCORD_WEBHOOK: ${{ secrets.DISCORD_WEBHOOK }}
        uses: Ilshidur/action-discord@master
        with:
          args: 'A new release ${{ github.ref_name }} has been created for {{ EVENT_PAYLOAD.repository.full_name }}.'

      - name: Cleanup on failure
        if: failure()
        run: |
          gh release delete 'release-v${{ env.VERSION }}' --yes || true
          rm -rf dist/ || true
        env:
          GITHUB_TOKEN: ${{ github.token }}

  trigger-publish:
    runs-on: ubuntu-latest
    timeout-minutes: 10
    needs: github-release
    if: success()
    permissions:
      actions: write
      contents: read
    steps:
      - name: Trigger publish workflow
        run: |
          curl -L \
            -X POST \
            -H "Accept: application/vnd.github+json" \
            -H "Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}" \
            -H "X-GitHub-Api-Version: 2022-11-28" \
            https://api.github.com/repos/${{ github.repository }}/actions/workflows/publish.yml/dispatches \
            -d '{"ref":"${{ github.ref }}"}'
